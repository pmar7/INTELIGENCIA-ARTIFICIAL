/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package hilosia;

import java.awt.Dimension;
import javax.swing.JLabel;

/**
 *
 * @author pauda
 */
public class Vista extends javax.swing.JFrame {

    /**
     * Creates new form Vista
     */
    public Vista() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        ResPues3 = new javax.swing.JButton();
        ResPues4 = new javax.swing.JButton();
        Guardar = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        LenguajeProgramacion = new javax.swing.JComboBox<>();
        jLabel4 = new javax.swing.JLabel();
        SeleccionIdioma = new javax.swing.JComboBox<>();
        ResPues1 = new javax.swing.JButton();
        ResPues2 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        IngresarPregunta = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        Pantalla = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setBackground(new java.awt.Color(255, 255, 255));
        jLabel1.setFont(new java.awt.Font("Yu Gothic UI Semibold", 1, 36)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 0, 153));
        jLabel1.setText("CHAT JPN IA ");

        jLabel2.setBackground(new java.awt.Color(28, 71, 28));
        jLabel2.setFont(new java.awt.Font("Segoe UI Black", 1, 18)); // NOI18N
        jLabel2.setText("Respuestas Rapidas");
        jLabel2.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        ResPues3.setBackground(new java.awt.Color(204, 204, 255));
        ResPues3.setFont(new java.awt.Font("Segoe UI Variable", 1, 12)); // NOI18N
        ResPues3.setText("¿Cuál es la forma de gestionar errores o excepciones al generar gráficas en Power BI desde Python?");
        ResPues3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ResPues3ActionPerformed(evt);
            }
        });

        ResPues4.setBackground(new java.awt.Color(204, 204, 255));
        ResPues4.setFont(new java.awt.Font("Segoe UI Variable", 1, 12)); // NOI18N
        ResPues4.setText("¿Qué opciones existen para exportar o guardar gráficas generadas en Power BI desde Java?");
        ResPues4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ResPues4ActionPerformed(evt);
            }
        });

        Guardar.setBackground(new java.awt.Color(255, 255, 204));
        Guardar.setFont(new java.awt.Font("Segoe UI Variable", 0, 12)); // NOI18N
        Guardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                GuardarActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Segoe UI Variable", 1, 12)); // NOI18N
        jLabel3.setText("Seleccione el lenguaje a programación");

        LenguajeProgramacion.setFont(new java.awt.Font("Segoe UI Variable", 0, 12)); // NOI18N
        LenguajeProgramacion.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Java", "Phyton" }));
        LenguajeProgramacion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LenguajeProgramacionActionPerformed(evt);
            }
        });

        jLabel4.setBackground(javax.swing.UIManager.getDefaults().getColor("Actions.Green"));
        jLabel4.setFont(new java.awt.Font("Segoe UI Variable", 1, 12)); // NOI18N
        jLabel4.setText("Seleccione el Idioma ");

        SeleccionIdioma.setFont(new java.awt.Font("Segoe UI Variable", 0, 12)); // NOI18N
        SeleccionIdioma.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Castellano", "Ingles" }));

        ResPues1.setBackground(new java.awt.Color(204, 204, 255));
        ResPues1.setFont(new java.awt.Font("Segoe UI Variable", 1, 12)); // NOI18N
        ResPues1.setText("¿Cuál es la forma recomendada de generar gráficas de Power BI desde una aplicación Java? ");
        ResPues1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ResPues1ActionPerformed(evt);
            }
        });

        ResPues2.setBackground(new java.awt.Color(204, 204, 255));
        ResPues2.setFont(new java.awt.Font("Segoe UI Variable", 1, 12)); // NOI18N
        ResPues2.setText("¿Qué es JFreeChart y para qué se utiliza en programación en Java?");
        ResPues2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ResPues2ActionPerformed(evt);
            }
        });

        jTable1.setBackground(new java.awt.Color(255, 255, 204));
        jTable1.setFont(new java.awt.Font("Segoe UI Semibold", 0, 12)); // NOI18N
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"¿Cuál es la forma recomendada de generar gráficas de Power BI desde una aplicación Java/Python?"},
                {"¿Qué biblioteca o API se utiliza comúnmente para interactuar con Power BI desde Java/Python? "},
                {"¿Cómo se autentica una aplicación Java/Python para conectarse a Power BI y generar gráficas?"},
                {"¿Cuáles son los principales tipos de gráficas que se pueden generar utilizando Power BI desde Java/Python?"},
                {"¿Cómo se pueden personalizar las propiedades de una gráfica en Power BI desde Java/Python?"},
                {"¿Es posible agregar interactividad a las gráficas generadas desde una aplicación Java/Python en Power BI?"},
                {"¿Qué métodos se utilizan para actualizar dinámicamente los datos en una gráfica de Power BI desde Java/Python? "},
                {"¿Cuál es la forma de gestionar errores o excepciones al generar gráficas en Power BI desde Java/Python?"},
                {"¿Cómo se pueden filtrar datos en una gráfica de Power BI generada desde una aplicación Java/Python? "},
                {"¿Qué consideraciones de rendimiento se deben tener en cuenta al generar gráficas en Power BI desde Java/Python? "},
                {"¿Es posible generar gráficas en tiempo real utilizando Power BI desde una aplicación Java/Python?"},
                {"¿Qué opciones existen para exportar o guardar gráficas generadas en Power BI desde Java/Python? "},
                {"¿Cómo se pueden incrustar gráficas de Power BI en una aplicación web desarrollada en Java/Python?"},
                {"¿Qué ventajas ofrece el uso de Power BI Embedded en comparación con Power BI Service desde una aplicación Java/Python?"},
                {"¿Cuáles son las mejores prácticas para la visualización y presentación de gráficas generadas en Power BI desde Java/Python?"},
                {"¿Qué es JFreeChart y para qué se utiliza en programación en Java? "},
                {"¿Cuál es la función principal de la librería JFreeChart en la creación de gráficos en Java?"},
                {"¿Qué tipos de gráficos se pueden crear utilizando JFreeChart?"},
                {"¿Cuál es la clase principal que se utiliza para crear un gráfico en JFreeChart?"},
                {"¿Qué métodos se utilizan para agregar datos a un gráfico en JFreeChart? "},
                {"¿Cuáles son las principales características de JFreeChart que lo diferencian de otras librerías de gráficos en Java?"},
                {"¿Cómo se personaliza la apariencia de un gráfico en JFreeChart?"},
                {"¿Cómo se personaliza la apariencia de un gráfico en JFreeChart?"},
                {"¿Cómo se puede exportar un gráfico creado con JFreeChart a un archivo de imagen? ¿Que es la espera activa (busy waiting) y cuando es apropiada en programacion de hilos?"},
                {"¿Cómo se puede exportar un gráfico creado con JFreeChart a un archivo de imagen? "},
                {"¿Qué tipos de formatos de exportación de imagen son compatibles con JFreeChart?"},
                {"¿Qué es la capacidad de interactividad en JFreeChart y cómo se logra?"},
                {"¿Cuál es el propósito de la librería JFreeChart Demo y cómo se puede utilizar para aprender sobre la creación de gráficos? "},
                {"¿Qué métodos se pueden utilizar para agregar etiquetas y leyendas a un gráfico en JFreeChart? "},
                {"¿Cómo se manejan los eventos de clic en un gráfico creado con JFreeChart? "},
                {"¿Qué es el API de JFreeChart y cuál es su importancia en el desarrollo de aplicaciones basadas en gráficos en Java?"}
            },
            new String [] {
                "PREGUNTAS DISPONIBLES IA"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        IngresarPregunta.setBackground(new java.awt.Color(0, 0, 153));
        IngresarPregunta.setText(" ↪");
        IngresarPregunta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                IngresarPreguntaActionPerformed(evt);
            }
        });
        IngresarPregunta.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                IngresarPreguntaPropertyChange(evt);
            }
        });

        Pantalla.setBackground(new java.awt.Color(255, 255, 204));
        Pantalla.setFont(new java.awt.Font("Segoe UI Variable", 0, 14)); // NOI18N
        jScrollPane2.setViewportView(Pantalla);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 202, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(ResPues1, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(ResPues2, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(ResPues3, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(ResPues4, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 452, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 195, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(SeleccionIdioma, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 227, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(LenguajeProgramacion, javax.swing.GroupLayout.PREFERRED_SIZE, 205, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 249, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 569, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(Guardar, javax.swing.GroupLayout.PREFERRED_SIZE, 522, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(IngresarPregunta)))))
                .addGap(26, 26, 26))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(62, 62, 62)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(ResPues1, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(ResPues2, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(ResPues4, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(ResPues3, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 282, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(SeleccionIdioma, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(LenguajeProgramacion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 282, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(Guardar, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(IngresarPregunta, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap(184, Short.MAX_VALUE))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void GuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_GuardarActionPerformed
        // TODO add your handling code here:
        
    }//GEN-LAST:event_GuardarActionPerformed

    private void LenguajeProgramacionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LenguajeProgramacionActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_LenguajeProgramacionActionPerformed

    private void IngresarPreguntaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_IngresarPreguntaActionPerformed
        // TODO add your handling code here:
        String FiltroProgramacion = (String) LenguajeProgramacion.getSelectedItem();
        String FiltroIdioma = (String) SeleccionIdioma.getSelectedItem();
        String Pregunta = Guardar.getText();
        String Respuesta;
        Pantalla.setMaximumSize(new Dimension(562,Integer.MAX_VALUE));

        if (FiltroIdioma == "Castellano") {
            switch (FiltroProgramacion) {
                case "Java": {
                    System.out.println("Pregunta: " + Pregunta);
                    switch (Pregunta) {
                        case "¿Cuál es la forma recomendada de generar gráficas de Power BI desde una aplicación Java?": { //1
                            Respuesta = "La forma recomendada es utilizar la API REST de Power BI para interactuar con los servicios y generar gráficas desde una aplicación Java.";
                            Pantalla.setText(Respuesta);
                            System.out.println("Respuesta generada");
                            break;
                        }
                        case "¿Qué biblioteca o API se utiliza comúnmente para interactuar con Power BI desde Java?": { //2
                            Respuesta = "Se puede utilizar la biblioteca Java de Power BI, que proporciona métodos y clases para interactuar con la API de Power BI a través de Java.";
                            Pantalla.setText(Respuesta);
                            System.out.println("Respuesta generada");
                            break;
                        }
                        case "¿Cómo se autentica una aplicación Java para conectarse a Power BI y generar gráficas?": { //3
                            Respuesta = "Se utiliza el flujo de autenticación de OAuth 2.0 para obtener un token de acceso, el cual se incluye en las solicitudes HTTP para autenticar la aplicación Java con Power BI.";
                            Pantalla.setText(Respuesta);
                            System.out.println("Respuesta generada");
                            break;
                        }
                        case "¿Cuáles son los principales tipos de gráficas que se pueden generar utilizando Power BI desde Java?": { //4
                            Respuesta = "Los principales tipos de gráficas incluyen gráficos de barras, gráficos de líneas, gráficos de dispersión, gráficos de torta, entre otros, que se pueden crear y personalizar a través de la API de Power BI. ";
                            Pantalla.setText(Respuesta);
                            System.out.println("Respuesta generada");
                            break;
                        }
                        case "¿Cómo se pueden personalizar las propiedades de una gráfica en Power BI desde Java?": { //5
                            Respuesta = "Las propiedades de una gráfica se pueden personalizar mediante la inclusión de parámetros y configuraciones específicas en las solicitudes HTTP que se envían a la API de Power BI desde la aplicación Java.";
                            Pantalla.setText(Respuesta);
                            System.out.println("Respuesta generada");
                            break;
                        }
                        case "¿Es posible agregar interactividad a las gráficas generadas desde una aplicación Java en Power BI?": { //6
                            Respuesta = "Sí, es posible agregar interactividad a las gráficas generadas mediante el uso de filtros y controles que permiten a los usuarios explorar y manipular los datos visualizados.";
                            Pantalla.setText(Respuesta);
                            System.out.println("Respuesta generada");
                            break;
                        }
                        case "¿Qué métodos se utilizan para actualizar dinámicamente los datos en una gráfica de Power BI desde Java?": { //7
                            Respuesta = "Se pueden utilizar métodos de la API de Power BI para enviar solicitudes de actualización con los nuevos datos desde la aplicación Java.";
                            Pantalla.setText(Respuesta);
                            System.out.println("Respuesta generada");
                            break;
                        }
                        case "¿Cuál es la forma de gestionar errores o excepciones al generar gráficas en Power BI desde Java?": { //8
                            Respuesta = "Se debe implementar un manejo adecuado de excepciones en Java para capturar y gestionar los posibles errores que puedan ocurrir al interactuar con la API de Power BI.";
                            Pantalla.setText(Respuesta);
                            System.out.println("Respuesta generada");
                            break;
                        }
                        case "¿Cómo se pueden filtrar datos en una gráfica de Power BI generada desde una aplicación Java?": { //9
                            Respuesta = "Se pueden aplicar filtros a través de la API de Power BI, especificando los criterios de filtrado en las solicitudes HTTP que se envían desde la aplicación Java.";
                            Pantalla.setText(Respuesta);
                            System.out.println("Respuesta generada");
                            break;
                        }
                        case "": { //10
                            Respuesta = "";
                            Pantalla.setText(Respuesta);
                            System.out.println("Respuesta generada");
                            break;
                        }
                        case "¿Qué consideraciones de rendimiento se deben tener en cuenta al generar gráficas en Power BI desde Java?": { //11
                            Respuesta = "Es importante optimizar la consulta y manipulación de datos para evitar sobrecargas y garantizar una experiencia eficiente para los usuarios finales.";
                            Pantalla.setText(Respuesta);
                            System.out.println("Respuesta generada");
                            break;
                        }
                        case "¿Es posible generar gráficas en tiempo real utilizando Power BI desde una aplicación Java?": { //12
                            Respuesta = "Sí, es posible generar gráficas en tiempo real utilizando la API de Power BI para actualizar continuamente los datos desde la aplicación Java.";
                            Pantalla.setText(Respuesta);
                            System.out.println("Respuesta generada");
                            break;
                        }
                        case "¿Qué opciones existen para exportar o guardar gráficas generadas en Power BI desde Java?": { //13
                            Respuesta = "Se pueden exportar gráficas en diversos formatos, como imágenes o PDF, a través de la API de Power BI desde una aplicación Java.";
                            Pantalla.setText(Respuesta);
                            System.out.println("Respuesta generada");
                            break;
                        }
                        case "¿Cómo se pueden incrustar gráficas de Power BI en una aplicación web desarrollada en Java?": { //14
                            Respuesta = "Se puede utilizar la funcionalidad de Power BI Embedded para incrustar gráficas en una aplicación web Java, lo cual requiere el uso de la API de incrustación.";
                            Pantalla.setText(Respuesta);
                            System.out.println("Respuesta generada");
                        }
                        case "¿Qué ventajas ofrece el uso de Power BI Embedded en comparación con Power BI Service desde una aplicación Java?": { //15
                            Respuesta = "Power BI Embedded ofrece un mayor grado de personalización y control sobre la integración de gráficas en aplicaciones Java, mientras que Power BI Service es más adecuado para usuarios finales y visualizaciones estándar.";
                            Pantalla.setText(Respuesta);
                            System.out.println("Respuesta generada");
                            break;
                        }
                        case "¿Cuáles son las mejores prácticas para la visualización y presentación de gráficas generadas en Power BI desde Java?": { //16
                            Respuesta = "Es importante considerar la claridad, el diseño intuitivo y la relevancia de la información presentada en las gráficas para garantizar una visualización efectiva de los datos.";
                            Pantalla.setText(Respuesta);
                            System.out.println("Respuesta generada");
                            break;
                        }
                        case "¿Qué es JFreeChart y para qué se utiliza en programación en Java?": { //17
                            Respuesta = "JFreeChart es una librería de código abierto en Java que permite la creación de gráficos y visualizaciones de datos. Se utiliza para representar datos de manera gráfica en aplicaciones Java.";
                            Pantalla.setText(Respuesta);
                            System.out.println("Respuesta generada");
                            break;
                        }
                        case "¿Cuál es la función principal de la librería JFreeChart en la creación de gráficos en Java?": { //18
                            Respuesta = "La función principal de JFreeChart es proporcionar un conjunto de clases y métodos para crear gráficos de diversos tipos, como gráficos de barras, líneas, tortas, dispersión, entre otros";
                            Pantalla.setText(Respuesta);
                            System.out.println("Respuesta generada");
                            break;
                        }
                        case "¿Qué tipos de gráficos se pueden crear utilizando JFreeChart?": { //19
                            Respuesta = "Con JFreeChart se pueden crear una amplia variedad de gráficos, incluyendo gráficos de barras, gráficos de líneas, gráficos de torta, gráficos de dispersión, gráficos XY, gráficos de burbujas y más.";
                            Pantalla.setText(Respuesta);
                            System.out.println("Respuesta generada");
                            break;
                        }
                        case "¿Cuál es la clase principal que se utiliza para crear un gráfico en JFreeChart?": { //20
                            Respuesta = "La clase principal utilizada para crear un gráfico en JFreeChart es org.jfree.chart.ChartFactory.";
                            Pantalla.setText(Respuesta);
                            System.out.println("Respuesta generada");
                            break;
                        }
                        case "¿Qué métodos se utilizan para agregar datos a un gráfico en JFreeChart?": { //21
                            Respuesta = "Para agregar datos a un gráfico en JFreeChart, se utilizan métodos como addValue() o addSeries() dependiendo del tipo de gráfico y la estructura de datos que estés utilizando";
                            Pantalla.setText(Respuesta);
                            System.out.println("Respuesta generada");
                            break;
                        }
                        case "¿Cuáles son las principales características de JFreeChart que lo diferencian de otras librerías de gráficos en Java?": { //22
                            Respuesta = "JFreeChart se destaca por ser de código abierto, fácil de usar, altamente personalizable, y ofrece una amplia gama de tipos de gráficos. También tiene una comunidad activa y una documentación detallada.";
                            Pantalla.setText(Respuesta);
                            System.out.println("Respuesta generada");
                            break;
                        }
                        case "¿Cómo se personaliza la apariencia de un gráfico en JFreeChart?": { //23
                            Respuesta = "La apariencia de un gráfico en JFreeChart se personaliza mediante el uso de métodos como setXXXPaint() y setXXXStroke(), donde \"XXX\" representa atributos como color y estilo de línea";
                            Pantalla.setText(Respuesta);
                            System.out.println("Respuesta generada");
                            break;
                        }
                        case "¿Qué es JCommon y cómo se relaciona con JFreeChart?": { //24
                            Respuesta = "JCommon es una librería auxiliar que proporciona clases y utilidades comunes para gráficos, y es utilizada por JFreeChart para ciertas funcionalidades.";
                            Pantalla.setText(Respuesta);
                            System.out.println("Respuesta generada");
                            break;
                        }
                        case "¿Cómo se puede exportar un gráfico creado con JFreeChart a un archivo de imagen?": { //25
                            Respuesta = "Se puede exportar un gráfico creado con JFreeChart a un archivo de imagen utilizando el método ChartUtilities.saveChartAsXXX(), donde \"XXX\" representa el formato de imagen, como PNG, JPG, etc.";
                            Pantalla.setText(Respuesta);
                            System.out.println("Respuesta generada");
                            break;
                        }
                        case "¿Qué tipos de formatos de exportación de imagen son compatibles con JFreeChart?": { //26
                            Respuesta = "JFreeChart soporta una variedad de formatos de imagen, incluyendo PNG, JPG, BMP y SVG.";
                            Pantalla.setText(Respuesta);
                            System.out.println("Respuesta generada");
                            break;
                        }
                        case "¿Qué es la capacidad de interactividad en JFreeChart y cómo se logra?": { //27
                            Respuesta = "La capacidad de interactividad en JFreeChart permite que los gráficos respondan a eventos, como clics del usuario. Esto se logra agregando controladores de eventos al gráfico, como ChartMouseListener.";
                            Pantalla.setText(Respuesta);
                            System.out.println("Respuesta generada");
                            break;
                        }
                        case "¿Cuál es el propósito de la librería JFreeChart Demo y cómo se puede utilizar para aprender sobre la creación de gráficos?": { //28
                            Respuesta = "JFreeChart Demo es un conjunto de ejemplos y demos proporcionados por la librería para ilustrar cómo crear diferentes tipos de gráficos. Puede ser utilizado como referencia y fuente de aprendizaje sobre cómo utilizar JFreeChart.";
                            Pantalla.setText(Respuesta);
                            System.out.println("Respuesta generada");
                            break;
                        }
                        case "¿Qué métodos se pueden utilizar para agregar etiquetas y leyendas a un gráfico en JFreeChart?": { //29
                            Respuesta = "Para agregar etiquetas y leyendas en JFreeChart, se utilizan métodos como setXXXLabel() y setLegend(), donde \"XXX\" representa el tipo de etiqueta o leyenda que deseas añadir";
                            Pantalla.setText(Respuesta);
                            System.out.println("Respuesta generada");
                            break;
                        }
                        case "¿Cómo se manejan los eventos de clic en un gráfico creado con JFreeChart?": { //30       
                            Respuesta = "Para manejar eventos de clic en un gráfico, se implementa una interfaz ChartMouseListener y se registra como un escucha de eventos utilizando el método addChartMouseListener().";
                            Pantalla.setText(Respuesta);
                            System.out.println("Respuesta generada");
                            break;
                        }
                        
                    }

                    break;
                }
                case "Phyton": {

                    switch (Pregunta) {
                        
                        //case
                        
                        case "": { //1
                            Respuesta = "¿Cuál es la forma recomendada de generar gráficas de Power BI desde una aplicación Python?";
                            Respuesta = "La forma recomendada es utilizar la biblioteca Python Power BI para interactuar con la API de Power BI y generar gráficas desde una aplicación Python.";
                            Pantalla.setText(Respuesta);
                            System.out.println("Respuesta generada");
                            break;
                        }
                        case "¿Qué biblioteca o API se utiliza comúnmente para interactuar con Power BI desde Python?": { //2
                            Respuesta = "Se utiliza la biblioteca 'powerbiclient' de Python, que proporciona métodos y clases para interactuar con la API de Power BI.";
                   
                            Pantalla.setText(Respuesta);
                            System.out.println("Respuesta generada");
                            break;
                        }
                        case "¿Cómo se autentica una aplicación Python para conectarse a Power BI y generar gráficas?": { //3
                            Respuesta = "Se utiliza el flujo de autenticación de OAuth 2.0 para obtener un token de acceso, el cual se incluye en las solicitudes HTTP para autenticar la aplicación Python con Power BI.";
                            Pantalla.setText(Respuesta);
                            System.out.println("Respuesta generada");
                            break;
                        }
                        case "¿Cuáles son los principales tipos de gráficas que se pueden generar utilizando Power BI desde Java/Python?": { //4
                            Respuesta = "Se pueden generar una amplia variedad de gráficas, incluyendo gráficos de barras, gráficos de líneas, gráficos de dispersión, gráficos de torta, entreotros, utilizando la API de Power BI desde Python.";
                            Pantalla.setText(Respuesta);
                            System.out.println("Respuesta generada");
                            break;
                        }
                        case "¿Cómo se pueden personalizar las propiedades de una gráfica en Power BI desde Python?": { //5
                            Respuesta = "Las propiedades de una gráfica se pueden personalizar mediante la inclusión de parámetros y configuraciones específicas en las solicitudes HTTP que se envían a la API de Power BI desde la aplicación Python.";
                            Pantalla.setText(Respuesta);
                            System.out.println("Respuesta generada");
                            break;
                        }
                        case "¿Es posible agregar interactividad a las gráficas generadas desde una aplicación Python en Power BI?": { //6
                            Respuesta = "Sí, es posible agregar interactividad a las gráficas generadas mediante el uso de filtros y controles que permiten a los usuarios explorar y manipular los datos visualizados.";
                            Pantalla.setText(Respuesta);
                            System.out.println("Respuesta generada");
                            break;
                        }
                        case "¿Qué métodos se utilizan para actualizar dinámicamente los datos en una gráfica de Power BI desde Python?": { //7
                            Respuesta = "Se pueden utilizar métodos de la API de Power BI para enviar solicitudes de actualización con los nuevos datos desde la aplicación Python.";
                            Pantalla.setText(Respuesta);
                            System.out.println("Respuesta generada");
                            break;
                        }
                        case "¿Cuál es la forma de gestionar errores o excepciones al generar gráficas en Power BI desde Python?": { //8
                            Respuesta = "Se debe implementar un manejo adecuado de excepciones en Python para capturar y gestionar los posibles errores que puedan ocurrir al interactuar con la API de Power BI.";
                            Pantalla.setText(Respuesta);
                            System.out.println("Respuesta generada");
                            break;
                        }
                        case "¿Cómo se pueden filtrar datos en una gráfica de Power BI generada desde una aplicación Python?": { //9
                            Respuesta = "Se pueden aplicar filtros a través de la API de Power BI, especificando los criterios de filtrado en las solicitudes HTTP que se envían desde la aplicación Python.";
                            Pantalla.setText(Respuesta);
                            System.out.println("Respuesta generada");
                            break;
                        }
                        case "¿Qué consideraciones de rendimiento se deben tener en cuenta al generar gráficas en Power BI desde Python?": { //10
                            Respuesta = "Es importante optimizar la consulta y manipulación de datos para evitar sobrecargas y garantizar una experiencia eficiente para los usuarios finales.";
                            Pantalla.setText(Respuesta);
                            System.out.println("Respuesta generada");
                            break;
                        }
                        case "¿Es posible generar gráficas en tiempo real utilizando Power BI desde una aplicación Python?": { //11
                            Respuesta = "Sí, es posible generar gráficas en tiempo real utilizando la API de Power BI para actualizar continuamente los datos desde la aplicación Python";
                            Pantalla.setText(Respuesta);
                            System.out.println("Respuesta generada");
                            break;
                        }
                        case "¿Qué opciones existen para exportar o guardar gráficas generadas en Power BI desde Python?": { //12
                            Respuesta = "Se pueden exportar gráficas en diversos formatos, como imágenes o PDF, a través de la API de Power BI desde una aplicación Python.";
                            Pantalla.setText(Respuesta);
                            System.out.println("Respuesta generada");
                            break;
                        }
                        case "¿Cómo se pueden incrustar gráficas de Power BI en una aplicación web desarrollada en Python?": { //13
                            Respuesta = "Se puede utilizar la funcionalidad de Power BI Embedded para incrustar gráficas en una aplicación web Python, lo cual requiere el uso de la API de incrustación.";
                            Pantalla.setText(Respuesta);
                            System.out.println("Respuesta generada");//30
                            break;
                        }
                        case "¿Qué ventajas ofrece el uso de Power BI Embedded en comparación con Power BI Service desde una aplicación Python?": { //14
                            Respuesta = "Power BI Embedded ofrece un mayor grado de personalización y control sobre la integración de gráficas en aplicaciones Python, mientras que Power BI Service es más adecuado para usuarios finales y visualizaciones estándar.";
                            break;
                        }
                        case "¿Cuáles son las mejores prácticas para la visualización y presentación de gráficas generadas en Power BI desde Python?": { //15
                            Respuesta = "Es importante considerar la claridad, el diseño intuitivo y la relevancia de la información presentada en las gráficas para garantizar una visualización efectiva de los datos";
                            Pantalla.setText(Respuesta);
                            System.out.println("Respuesta generada");
                            break;
                        }
                        

                    }

                    break;
                }

                default: {
                    break;
                }

            }
        }
        else{
            switch (FiltroProgramacion) {
                case "Java": {
                    System.out.println("Pregunta: " + Pregunta);
                    switch (Pregunta) {
                        case "What is the recommended way to generate Power BI charts from a Java application?": { //1
                            Respuesta = "The recommended way is to use the Power BI REST API to interact with services and generate charts from a Java application.";
                            Pantalla.setText(Respuesta);
                            System.out.println("Respuesta generada");
                            break;
                        }
                        case "What library or API is commonly used to interact with Power BI from Java?": { //2
                            Respuesta = "You can use the Power BI Java library, which provides methods and classes to interact with the Power BI API through Java.";
                            Pantalla.setText(Respuesta);
                            System.out.println("Respuesta generada");
                            break;
                        }
                        case "How do I authenticate a Java application to connect to Power BI and generate charts?": { //3
                            Respuesta = "The OAuth 2.0 authentication flow is used to obtain an access token, which is included in HTTP requests to authenticate the Java application with Power BI.";
                            Pantalla.setText(Respuesta);
                            System.out.println("Respuesta generada");
                            break;
                        }
                        case "What are the main types of charts that can be generated using Power BI from Java?": { //4
                            Respuesta = "The main types of charts include bar charts, line charts, scatter charts, pie charts, among others, which can be created and customized through the Power BI API.";
                            Pantalla.setText(Respuesta);
                            System.out.println("Respuesta generada");
                            break;
                        }
                        case "How can you customize the properties of a chart in Power BI from Java?": { //5
                            Respuesta = "The properties of a chart can be customized by including specific parameters and settings in HTTP requests that are sent to the Power BI API from your Java application.";
                            Pantalla.setText(Respuesta);
                            System.out.println("Respuesta generada");
                            break;
                        }
                        case "Is it possible to add interactivity to graphs generated from a Java/Python application in Power BI?": { //6
                            Respuesta = "Yes, it is possible to add interactivity to the generated graphs by using filters and controls that allow users to explore and manipulate the displayed data";
                            Pantalla.setText(Respuesta);
                            System.out.println("Respuesta generada");
                            break;
                        }
                        case "What methods are used to dynamically update data in a Power BI chart from Java?": { //7
                            Respuesta = "You can use Power BI API methods to send update requests with new data from your Java application.";
                            Pantalla.setText(Respuesta);
                            System.out.println("Respuesta generada");
                            break;
                        }
                        case "What is the way to handle errors or exceptions when generating charts in Power BI from Java?": { //8
                            Respuesta = "Proper exception handling should be implemented in Java to capture and handle potential errors that may occur when interacting with the Power BI API.";
                            Pantalla.setText(Respuesta);
                            System.out.println("Respuesta generada");
                            break;
                        }
                        case "How can you filter data in a Power BI chart generated from a Java/Python application?": { //9
                            Respuesta = "Filters can be applied through the Power BI API by specifying filter criteria in HTTP requests that are sent from the Java application";
                            Pantalla.setText(Respuesta);
                            System.out.println("Respuesta generada");
                            break;
                        }
                        case "What performance considerations should be taken into account when generating charts in Power BI from Java?": { //10
                            Respuesta = "It is important to optimize data querying and manipulation to avoid overloads and ensure an efficient experience for end users.";
                            Pantalla.setText(Respuesta);
                            System.out.println("Respuesta generada");
                            break;
                        }
                        case "Is it possible to generate real-time graphs using Power BI from a Java application?": { //11
                            Respuesta = "Yes, it is possible to generate real-time charts using the Power BI API to continuously update data from the Java application.";
                            Pantalla.setText(Respuesta);
                            System.out.println("Respuesta generada");
                            break;
                        }
                        case "What options are there to export or save graphs generated in Power BI from Java?": { //12
                            Respuesta = "Charts can be exported in various formats, such as images or PDF, through the Power BI API from a Java application.";
                            Pantalla.setText(Respuesta);
                            System.out.println("Respuesta generada");
                            break;
                        }
                        case "How can you embed Power BI charts in a web application developed in Java?": { //13
                            Respuesta = "You can use Power BI Embedded functionality to embed charts in a Java web application, which requires the use of the embed API.";
                            Pantalla.setText(Respuesta);
                            System.out.println("Respuesta generada");
                            break;
                        }
                        case "What are the benefits of using Power BI Embedded compared to Power BI Service from a Java application?": { //14
                            Respuesta = "Power BI Embedded offers a greater degree of customization and control over the integration of charts into Java applications, while Power BI Service is better suited for end users and standard visualizations.";
                            Pantalla.setText(Respuesta);
                            System.out.println("Respuesta generada");
                        }
                        case "What are the best practices for viewing and presenting charts generated in Power BI from Java?": { //15
                            Respuesta = "It is important to consider the clarity, intuitive design and relevance of the information presented in the graphs to ensure effective visualization of the data.";
                            Pantalla.setText(Respuesta);
                            System.out.println("Respuesta generada");
                            break;
                        }
                        case "What is JFreeChart and what is it used for in Java programming?": { //16
                            Respuesta = "JFreeChart is an open source Java library that allows the creation of charts and data visualizations. It is used to represent data graphically in Java applications.";
                            Pantalla.setText(Respuesta);
                            System.out.println("Respuesta generada");
                            break;
                        }
                        case "What is the main function of the JFreeChart library in creating charts in Java?": { //17
                            Respuesta = "The main function of JFreeChart is to provide a set of classes and methods to create charts of various types, such as bar, line, pie, scatter charts, among others";
                            Pantalla.setText(Respuesta);
                            System.out.println("Respuesta generada");
                            break;
                        }
                        case "What types of charts can be created using JFreeChart?": { //18
                            Respuesta = "A wide variety of charts can be created with JFreeChart, including bar charts, line charts, pie charts, scatter charts, XY charts, bubble charts, and more";
                            Pantalla.setText(Respuesta);
                            System.out.println("Respuesta generada");
                            break;
                        }
                        case "What is the main class used to create a chart in JFreeChart?": { //19
                            Respuesta = "The main class used to create a chart in JFreeChart is org.jfree.chart.ChartFactory";
                            Pantalla.setText(Respuesta);
                            System.out.println("Respuesta generada");
                            break;
                        }
                        case "What methods are used to add data to a chart in JFreeChart?": { //20
                            Respuesta = "To add data to a chart in JFreeChart, methods like addValue() or addSeries() are used depending on the type of chart and data structure you are using.";
                            Pantalla.setText(Respuesta);
                            System.out.println("Respuesta generada");
                            break;
                        }
                        case "What are the main features of JFreeChart that differentiate it from other Java chart libraries?": { //21
                            Respuesta = "JFreeChart stands out for being open source, easy to use, highly customizable, and offers a wide range of chart types. It also has an active community and detailed documentation.";
                            Pantalla.setText(Respuesta);
                            System.out.println("Respuesta generada");
                            break;
                        }
                        case "How do you customize the appearance of a chart in JFreeChart?": { //22
                            Respuesta = "The appearance of a chart in JFreeChart is customized by using methods such as setXXXPaint() and setXXXStroke(), where \"XXX\" represents attributes such as color and line style.";
                            Pantalla.setText(Respuesta);
                            System.out.println("Respuesta generada");
                            break;
                        }
                        case "What is JCommon and how is it related to JFreeChart?": { //23
                            Respuesta = "JCommon is an auxiliary library that provides common charting classes and utilities, and is used by JFreeChart for certain functionality.";
                            Pantalla.setText(Respuesta);
                            System.out.println("Respuesta generada");
                            break;
                        }
                        case "How can you export a chart created with JFreeChart to an image file?": { //24
                            Respuesta = "A chart created with JFreeChart can be exported to an image file using the ChartUtilities.saveChartAsXXX() method, where \"XXX\" represents the image format, such as PNG, JPG, etc.";
                            Pantalla.setText(Respuesta);
                            System.out.println("Respuesta generada");
                            break;
                        }
                        case "What types of image export formats are supported by JFreeChart?": { //25
                            Respuesta = "JFreeChart supports a variety of image formats, including PNG, JPG, BMP and SVG.";
                            Pantalla.setText(Respuesta);
                            System.out.println("Respuesta generada");
                            break;
                        }
                        case "What is interactivity capability in JFreeChart and how is it achieved?": { //26
                            Respuesta = "The interactivity capability in JFreeChart allows charts to respond to events, such as user clicks. This is achieved by adding event handlers to the chart, such as ChartMouseListener.";
                            Pantalla.setText(Respuesta);
                            System.out.println("Respuesta generada");
                            break;
                        }
                        case "What is the purpose of the JFreeChart Demo library and how can it be used to learn about charting?": { //27
                            Respuesta = "JFreeChart Demo is a set of examples and demos provided by the library to illustrate how to create different types of charts. It can be used as a reference and learning source on how to use JFreeChart";
                            Pantalla.setText(Respuesta);
                            System.out.println("Respuesta generada");
                            break;
                        }
                        case "What methods can be used to add labels and legends to a chart in JFreeChart?": { //28
                            Respuesta = "To add labels and legends in JFreeChart, you use methods such as setXXXLabel() and setLegend(), where \"XXX\" represents the type of label or legend you want to add.";
                            Pantalla.setText(Respuesta);
                            System.out.println("Respuesta generada");
                            break;
                            
                        }
                        case "How are click events handled in a chart created with JFreeChart?": { //29
                            Respuesta = "To handle click events on a chart, a ChartMouseListener interface is implemented and registered as an event listener using the addChartMouseListener() method.";
                            Pantalla.setText(Respuesta);
                            System.out.println("Respuesta generada");
                            break;
                        }
                        case "What is JFreeChart API and what is its importance in developing chart-based applications in Java?": { //30
                            Respuesta = "The JFreeChart API is the set of classes and methods provided by the library for creating and manipulating charts in Java. It is essential in the development of applications that require visual representation of data in an effective and understandable way.";
                            Pantalla.setText(Respuesta);
                            System.out.println("Respuesta generada");
                            break;
                        }
                        
                    }

                    break;
                }
                case "Phyton": {

                    switch (Pregunta) {
                        
                        //case
                        case "What is the recommended way to generate Power BI charts from a Python application?": { //1
                            Respuesta = " The recommended way is to use the Python Power BI library to interact with the Power BI API and generate charts from a Python application.";
                            Pantalla.setText(Respuesta);
                            System.out.println("Respuesta generada");
                            break;
                        }
                        case "What library or API is commonly used to interact with Power BI from Python?": { //2
                            Respuesta = "The library ' is usedpowerbiclient' Python, which provides methods and classes to interact with the Power BI API.";
                            Pantalla.setText(Respuesta);
                            System.out.println("Respuesta generada");
                            break;
                        }
                        case "": { //3
                            Respuesta = "How do I authenticate a Python application to connect to Power BI and generate charts?";
                             Respuesta = "The OAuth 2.0 authentication flow is used to obtain an access token, which is included in HTTP requests to authenticate the Python application with Power BI.";
                            Pantalla.setText(Respuesta);
                            System.out.println("Respuesta generada");
                            break;
                        }
                        
                        case "What are the main types of charts that can be generated using Power BI from Java/Python?": { //4
                            Respuesta = "A wide variety of charts, including bar charts, line charts, scatter charts, pie charts, and more, can be generated using the Power BI API from Python.";
                            Pantalla.setText(Respuesta);
                            System.out.println("Respuesta generada");
                            break;
                        }
                        
                        case "How can you customize the properties of a chart in Power BI from Python?": { //5
                            Respuesta = "The properties of a chart can be customized by including specific parameters and settings in HTTP requests that are sent to the Power BI API from your Python application.";
                            Pantalla.setText(Respuesta);
                            System.out.println("Respuesta generada");
                            break;
                        }
                        
                        case "Is it possible to add interactivity to graphs generated from a Python application in Power BI?": { //6
                            Respuesta = "Yes, it is possible to add interactivity to the generated graphs by using filters and controls that allow users to explore and manipulate the displayed data.";
                            Pantalla.setText(Respuesta);
                            System.out.println("Respuesta generada");
                            break;
                        }
                        
                        case "What methods are used to dynamically update data in a Power BI chart from Python?": { //7
                            Respuesta = "You can use Power BI API methods to send update requests with new data from your Python application";
                            Pantalla.setText(Respuesta);
                            System.out.println("Respuesta generada");
                            break;
                        }
                        
                        case "What is the way to handle errors or exceptions when generating charts in Power BI from Python?": { //8
                            Respuesta = "Proper exception handling should be implemented in Python to capture and handle potential errors that may occur when interacting with the Power BI API.";
                            Pantalla.setText(Respuesta);
                            System.out.println("Respuesta generada");
                            break;
                        }
                        
                        case "How can you filter data in a Power BI chart generated from a Java/Python application?": { //9
                            Respuesta = "Filters can be applied through the Power BI API by specifying filter criteria in HTTP requests that are sent from the Python application";
                            Pantalla.setText(Respuesta);
                            System.out.println("Respuesta generada");
                            break;
                        }
                        
                        case "What performance considerations should be taken into account when generating charts in Power BI from Python?": { //10
                            Respuesta = "It is important to optimize data querying and manipulation to avoid overloads and ensure an efficient experience for end users";
                            Pantalla.setText(Respuesta);
                            System.out.println("Respuesta generada");
                            break;
                        }
                        
                        case "Is it possible to generate real-time graphs using Power BI from a Python application?": { //11
                            Respuesta = "Yes, it is possible to generate real-time charts using the Power BI API to continuously update data from the Python application.";
                            Pantalla.setText(Respuesta);
                            System.out.println("Respuesta generada");
                            break;
                        }
                        
                        case "What options are there to export or save graphs generated in Power BI from Python?": { //12
                            Respuesta = "Charts can be exported in various formats, such as images or PDF, through the Power BI API from a Python application.";
                            Pantalla.setText(Respuesta);
                            System.out.println("Respuesta generada");
                            break;
                        }
                        
                        case "How can you embed Power BI charts in a web application developed in Python?": { //13
                            Respuesta = "You can use Power BI Embedded functionality to embed charts in a Python web application, which requires the use of the embed API.";
                            Pantalla.setText(Respuesta);
                            System.out.println("Respuesta generada");
                            break;
                        }
                        
                        case "What are the benefits of using Power BI Embedded compared to Power BI Service from a Python application?": { //14
                            Respuesta = "Power BI Embedded offers a greater degree of customization and control over the integration of charts into Python applications, while Power BI Service is better suited for end users and standard visualizations.";
                            Pantalla.setText(Respuesta);
                            System.out.println("Respuesta generada");
                            break;
                        }
                        
                        case "What are the best practices for viewing and presenting charts generated in Power BI from Python?": { //15
                            Respuesta = "It is important to consider the clarity, intuitive design and relevance of the information presented in the graphs to ensure effective visualization of the data.";
                            Pantalla.setText(Respuesta);
                            System.out.println("Respuesta generada");
                            break;
                        }
                        
                       
                        
                        
                     
                    }
                    
                    break;
                }

                default: {
                    break;
                }

            }
        }
        
    }//GEN-LAST:event_IngresarPreguntaActionPerformed

    private void ResPues1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ResPues1ActionPerformed
        // TODO add your handling code here:
        String Respuesta = "La forma recomendada es utilizar la API REST de Power BI para interactuar con los servicios y generar gráficas desde una aplicación Java.";
        Pantalla.setText(Respuesta);
    }//GEN-LAST:event_ResPues1ActionPerformed

    private void ResPues2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ResPues2ActionPerformed
        // TODO add your handling code here:
        String Respuesta = "JFreeChart es una librería de código abierto en Java que permite la creación de gráficos y visualizaciones de datos. Se utiliza para representar datos de manera gráfica en aplicaciones Java.";
        Pantalla.setText(Respuesta);
    }//GEN-LAST:event_ResPues2ActionPerformed

    private void ResPues3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ResPues3ActionPerformed
        // TODO add your handling code here:
        String Respuesta = "Se debe implementar un manejo adecuado de excepciones en Python para capturar y gestionar los posibles errores que puedan ocurrir al interactuar con la API de Power BI.";
        Pantalla.setText(Respuesta);
    }//GEN-LAST:event_ResPues3ActionPerformed

    private void ResPues4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ResPues4ActionPerformed
        // TODO add your handling code here:
        String Respuesta = "Se pueden exportar gráficas en diversos formatos, como imágenes o PDF, a través de la API de Power BI desde una aplicación Java.";
        Pantalla.setText(Respuesta);
    }//GEN-LAST:event_ResPues4ActionPerformed

    private void IngresarPreguntaPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_IngresarPreguntaPropertyChange
        // TODO add your handling code here:
    }//GEN-LAST:event_IngresarPreguntaPropertyChange

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Vista.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Vista.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Vista.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Vista.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Vista().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField Guardar;
    private javax.swing.JButton IngresarPregunta;
    private javax.swing.JComboBox<String> LenguajeProgramacion;
    private javax.swing.JLabel Pantalla;
    private javax.swing.JButton ResPues1;
    private javax.swing.JButton ResPues2;
    private javax.swing.JButton ResPues3;
    private javax.swing.JButton ResPues4;
    private javax.swing.JComboBox<String> SeleccionIdioma;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables
}
